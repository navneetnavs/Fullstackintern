{"ast":null,"code":"// Mocked API service for PII image masking\nconst API_BASE_URL = '/api';\n\n// Simulate a masked image by creating a canvas with overlay rectangles\nconst createMaskedImage = originalImage => {\n  return new Promise(resolve => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      // Draw original image\n      ctx.drawImage(img, 0, 0);\n\n      // Add mock PII masking rectangles (simulating detected PII areas)\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n\n      // Mock some random PII areas\n      const maskAreas = [{\n        x: img.width * 0.1,\n        y: img.height * 0.2,\n        width: img.width * 0.3,\n        height: img.height * 0.05\n      }, {\n        x: img.width * 0.6,\n        y: img.height * 0.4,\n        width: img.width * 0.25,\n        height: img.height * 0.04\n      }, {\n        x: img.width * 0.2,\n        y: img.height * 0.7,\n        width: img.width * 0.4,\n        height: img.height * 0.06\n      }];\n      maskAreas.forEach(area => {\n        ctx.fillRect(area.x, area.y, area.width, area.height);\n\n        // Add \"MASKED\" text overlay\n        ctx.fillStyle = 'white';\n        ctx.font = `${Math.max(12, area.height * 0.6)}px Arial`;\n        ctx.textAlign = 'center';\n        ctx.fillText('MASKED', area.x + area.width / 2, area.y + area.height * 0.7);\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      });\n\n      // Convert canvas to blob\n      canvas.toBlob(blob => {\n        const maskedImageUrl = URL.createObjectURL(blob);\n        resolve(maskedImageUrl);\n      }, 'image/png');\n    };\n    img.src = originalImage;\n  });\n};\nexport const maskImage = async imageFile => {\n  // Simulate API delay\n  const delay = Math.random() * 2000 + 1500; // 1.5-3.5 seconds\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      // Simulate potential API failures (10% chance)\n      if (Math.random() < 0.1) {\n        setTimeout(() => {\n          reject(new Error('API service temporarily unavailable. Please try again.'));\n        }, delay);\n        return;\n      }\n\n      // Create object URL from the uploaded file\n      const originalImageUrl = URL.createObjectURL(imageFile);\n      setTimeout(async () => {\n        try {\n          const maskedImageUrl = await createMaskedImage(originalImageUrl);\n\n          // Clean up the original object URL\n          URL.revokeObjectURL(originalImageUrl);\n          resolve({\n            success: true,\n            maskedImageUrl,\n            message: 'Image processed successfully',\n            detectedPII: ['Personal Name', 'Phone Number', 'Email Address']\n          });\n        } catch (error) {\n          reject(new Error('Failed to process image. Please try again.'));\n        }\n      }, delay);\n    } catch (error) {\n      reject(new Error('Failed to upload image. Please check your file and try again.'));\n    }\n  });\n};\nexport const checkApiHealth = async () => {\n  // Mock health check\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        status: 'healthy',\n        timestamp: new Date().toISOString()\n      });\n    }, 500);\n  });\n};","map":{"version":3,"names":["API_BASE_URL","createMaskedImage","originalImage","Promise","resolve","canvas","document","createElement","ctx","getContext","img","Image","onload","width","height","drawImage","fillStyle","maskAreas","x","y","forEach","area","fillRect","font","Math","max","textAlign","fillText","toBlob","blob","maskedImageUrl","URL","createObjectURL","src","maskImage","imageFile","delay","random","reject","setTimeout","Error","originalImageUrl","revokeObjectURL","success","message","detectedPII","error","checkApiHealth","status","timestamp","Date","toISOString"],"sources":["/Users/navneetkumar/Desktop/Agiledgewebsite/internshipassignment/internassign/Fullstackintern/src/services/apiService.js"],"sourcesContent":["// Mocked API service for PII image masking\nconst API_BASE_URL = '/api';\n\n// Simulate a masked image by creating a canvas with overlay rectangles\nconst createMaskedImage = (originalImage) => {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    const img = new Image();\n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // Draw original image\n      ctx.drawImage(img, 0, 0);\n      \n      // Add mock PII masking rectangles (simulating detected PII areas)\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      \n      // Mock some random PII areas\n      const maskAreas = [\n        { x: img.width * 0.1, y: img.height * 0.2, width: img.width * 0.3, height: img.height * 0.05 },\n        { x: img.width * 0.6, y: img.height * 0.4, width: img.width * 0.25, height: img.height * 0.04 },\n        { x: img.width * 0.2, y: img.height * 0.7, width: img.width * 0.4, height: img.height * 0.06 },\n      ];\n      \n      maskAreas.forEach(area => {\n        ctx.fillRect(area.x, area.y, area.width, area.height);\n        \n        // Add \"MASKED\" text overlay\n        ctx.fillStyle = 'white';\n        ctx.font = `${Math.max(12, area.height * 0.6)}px Arial`;\n        ctx.textAlign = 'center';\n        ctx.fillText('MASKED', area.x + area.width / 2, area.y + area.height * 0.7);\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      });\n      \n      // Convert canvas to blob\n      canvas.toBlob((blob) => {\n        const maskedImageUrl = URL.createObjectURL(blob);\n        resolve(maskedImageUrl);\n      }, 'image/png');\n    };\n    \n    img.src = originalImage;\n  });\n};\n\nexport const maskImage = async (imageFile) => {\n  // Simulate API delay\n  const delay = Math.random() * 2000 + 1500; // 1.5-3.5 seconds\n  \n  return new Promise(async (resolve, reject) => {\n    try {\n      // Simulate potential API failures (10% chance)\n      if (Math.random() < 0.1) {\n        setTimeout(() => {\n          reject(new Error('API service temporarily unavailable. Please try again.'));\n        }, delay);\n        return;\n      }\n      \n      // Create object URL from the uploaded file\n      const originalImageUrl = URL.createObjectURL(imageFile);\n      \n      setTimeout(async () => {\n        try {\n          const maskedImageUrl = await createMaskedImage(originalImageUrl);\n          \n          // Clean up the original object URL\n          URL.revokeObjectURL(originalImageUrl);\n          \n          resolve({\n            success: true,\n            maskedImageUrl,\n            message: 'Image processed successfully',\n            detectedPII: [\n              'Personal Name',\n              'Phone Number', \n              'Email Address'\n            ]\n          });\n        } catch (error) {\n          reject(new Error('Failed to process image. Please try again.'));\n        }\n      }, delay);\n      \n    } catch (error) {\n      reject(new Error('Failed to upload image. Please check your file and try again.'));\n    }\n  });\n};\n\nexport const checkApiHealth = async () => {\n  // Mock health check\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        status: 'healthy',\n        timestamp: new Date().toISOString()\n      });\n    }, 500);\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}